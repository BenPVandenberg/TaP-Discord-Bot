#!/usr/bin/env node
/* eslint-disable no-fallthrough */
/* eslint-disable no-console */

/**
 * Module dependencies.
 */

const debug = require("debug")("discord-bot-admin-backend:server");
const fs = require("fs");
const path = require("path");
const https = require("https");
const app = require("../app");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTPS server.
 */

const server = https.createServer(
    {
        key: fs.readFileSync(process.env.SERVER_KEY),
        cert: fs.readFileSync(process.env.SERVER_CERT),
    },
    app
);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const portToNormalize = parseInt(val, 10);

    // eslint-disable-next-line no-restricted-globals
    if (isNaN(portToNormalize)) {
        // named pipe
        return val;
    }

    if (portToNormalize >= 0) {
        // port number
        return portToNormalize;
    }

    return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
        case "EADDRINUSE":
            console.error(`${bind} is already in use`);
            process.exit(1);
        default:
            throw error;
    }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind =
        typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
    console.log(`Listening on ${bind}`);
}
